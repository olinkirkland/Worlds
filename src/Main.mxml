<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:ui="ui.*"
               width="100%"
               height="100%"
               frameRate="60"
               applicationComplete="onApplicationComplete(event)">

    <fx:Style source="/assets/css/global.css" />

    <fx:Script>
        <![CDATA[
        import global.Color;
        import global.Sort;
        import global.Util;

        import graph.Cell;
        import graph.Corner;
        import graph.Edge;

        import layers.geography.River;
        import layers.tectonics.TectonicPlate;
        import layers.wind.WindCell;

        import mx.core.UIComponent;
        import mx.events.FlexEvent;
        import mx.events.ResizeEvent;

        import ui.UIEventType;

        public static var map:Map;

        private var layerDebug:UIComponent;
        private var layerOutlines:UIComponent;
        private var layerTectonicPlates:UIComponent;
        private var layerHeightMap:UIComponent;
        private var layerContinents:UIComponent;
        private var layerRelief:UIComponent;
        private var layerOcean:UIComponent;
        private var layerWind:UIComponent;
        private var layerPrecipitation:UIComponent;
        private var layerTemperature:UIComponent;
        private var layerWater:UIComponent;
        private var layerFlux:UIComponent;
        private var layerRivers:UIComponent;

        private var layers:Array;

        private var g:Graphics;

        public function onApplicationComplete(event:FlexEvent):void
        {
            // Set up layers
            layerDebug = new UIComponent();
            layerDebug.name = "debug";
            layerOutlines = new UIComponent();
            layerOutlines.name = "outlines";
            layerTectonicPlates = new UIComponent();
            layerTectonicPlates.name = "tectonics";
            layerHeightMap = new UIComponent();
            layerHeightMap.name = "elevation";
            layerContinents = new UIComponent();
            layerContinents.name = "continents";
            layerRelief = new UIComponent();
            layerRelief.name = "relief";
            layerOcean = new UIComponent();
            layerOcean.name = "ocean";
            layerWind = new UIComponent();
            layerWind.name = "wind";
            layerPrecipitation = new UIComponent();
            layerPrecipitation.name = "precipitation";
            layerTemperature = new UIComponent();
            layerTemperature.name = "temperature";
            layerWater = new UIComponent();
            layerWater.name = "water";
            layerFlux = new UIComponent();
            layerFlux.name = "flux";
            layerRivers = new UIComponent();
            layerRivers.name = "rivers";

            //layers = [layerTectonicPlates, layerHeightMap, layerContinents, layerRelief, layerOcean, layerWind, layerWater, layerPrecipitation, layerFlux, layerRivers, layerTemperature, layerOutlines, layerDebug];
            layers = [layerTectonicPlates, layerHeightMap, layerContinents, layerRelief, layerOcean, layerWind, layerOutlines, layerDebug];
            for each (var layer:UIComponent in layers)
                layerGroup.addElement(layer);

            // Initial layers
            //var initialLayers:Array = [layerWind, layerOcean, layerRelief, layerContinents, layerHeightMap];
            var initialLayers:Array = [layerWind];
            for each (layer in layers)
                layer.visible = false;
            for each (layer in initialLayers)
                layer.visible = true;

            // Make Map
            makeMap();
            drawLayers();

            // Interactivity
            userInterface.addLayers(layers.reverse());

            addEventListener(MouseEvent.CLICK, onClick);

            userInterface.addEventListener(UIEventType.MAKE_MAP, function (event:Event):void
            {
                userInterface.setToWorking();
                setTimeout(function ():void
                {
                    makeMap();
                    drawLayers();
                }, 100);
            });
        }

        private function drawLayers():void
        {
            drawDebug();
            drawOutlines();
            drawTectonicPlates();
            drawColorHeightMap();
            drawContinents();
            drawRelief();
            drawOcean();

            drawWind();
            //drawPrecipitation();
            //drawTemperature();
            //drawWater();
            //drawFlux();
            //drawRivers();
        }

        private function onClick(event:MouseEvent):void
        {
            var p:Point = new Point(event.localX, event.localY);
            var arr:Array = Util.toArray(map.quadTree.queryFromPoint(p, 10));
            if (arr.length > 0)
            {
                var t:Point = Util.closestPoint(p, arr);
                var c:Cell = map.getCellByPoint(t);
                describe(c);
            }

            drawWind(map.wind.closestCellToPoint(t));
        }

        private function describe(c:Cell):void
        {
            trace("Cell #" + c.index);
            //trace("  altitude=" + c.altitude);
            trace("elevation=" + c.elevation.toFixed(3));
            var neighborIndexes:Array = [];
            for each (var neighbor:Cell in c.neighbors)
                neighborIndexes.push(neighbor.index);
            trace(c.tectonicPlate.type);
            //trace("Neighbors (" + c.neighbors.length + "): " + neighborIndexes.join(", "));
        }

        private function makeMap():void
        {
            map = new Map(1200, 600, Util.stringToSeed(userInterface.seedPhrase));

            userInterface.setToReady();
        }

        private function drawContinents():void
        {
            drawOnLayer(layerContinents);

            for each (var cell:Cell in map.cells)
                if (!cell.ocean)
                    drawCell(cell, Color.green);
        }

        private function drawOcean():void
        {
            drawOnLayer(layerOcean);

            for each (var cell:Cell in map.cells)
                if (cell.ocean)
                    drawCell(cell, Color.blue, .6);
        }

        private function drawWind(windCell:WindCell = null):void
        {
            drawOnLayer(layerWind);

            for each (var c:WindCell in map.wind.windCellsByPoint)
            {
                //drawDot(c.point, Color.red, 2);
                g.beginFill(Color.black, c.ocean ? 0 : c.elevation);

                var p1:Point = c.corners[0];
                for (var i:int = 1; i <= c.corners.length; i++)
                {
                    var p2:Point = i < c.corners.length ? c.corners[i] : c.corners[0];
                    drawLine(p1, p2, Color.black, 1, i == 1);

                    p1 = p2;
                }
                g.endFill();

                if (c.force.strength > 0)
                    drawPointer(c.point, c.force.angle, Color.red, c.force.strength * 7);
            }

            if (windCell)
            {
                trace(windCell.elevation);
//                drawDot(windCell.point, Color.red, 4);
//                for each (c in windCell.neighbors)
//                    drawPointer(c.point, Util.angleBetweenTwoPoints(windCell.point, c.point), Color.black);
            }

//            for each (var gust:WindCell in map.wind.windCellsByPoint)
//                if (gust.force.strength > 0)
//                    drawPointer(gust.point, gust.force.angle, Color.white, 5, gust.force.strength / 30);
        }

        private function drawPrecipitation():void
        {
            drawOnLayer(layerPrecipitation);

            for each (var cell:Cell in map.cells)
                drawCell(cell, Color.darkBlue, cell.precipitation);
        }

        private function drawTemperature():void
        {
            drawOnLayer(layerTemperature);

            for each (var cell:Cell in map.cells)
                drawCell(cell, Util.colorBetweenColors(Color.blue, Color.orange, cell.temperature), .7);
        }

        private function drawFlux():void
        {
            drawOnLayer(layerFlux);
            g.lineStyle(1, Color.darkBlue);

            for each (var cell:Cell in map.cells)
            {
                if (cell.lowestNeighbor && !cell.lowestNeighbor.ocean)
                {
                    g.moveTo(cell.point.x, cell.point.y);
                    g.lineTo(cell.lowestNeighbor.point.x, cell.lowestNeighbor.point.y);
                }
            }
        }

        private function drawRivers():void
        {
            drawOnLayer(layerRivers);

            map.hydrology.rivers.sort(Sort.riverByLength);
            for each (var river:River in map.hydrology.rivers)
            {
                g.lineStyle(1, Math.random() * 0xffffff);
                var color:uint = Color.random;
                for each (var cell:Cell in river.cells)
                {
                    if (river.end != cell)
                    {
                        drawPointer(cell.point, Util.angleBetweenTwoPoints(cell.point, cell.lowestNeighbor.point), color);
                    } else
                    {
                        drawDot(cell.point, color, 5);
                    }
                }
            }
        }

        private function drawWater():void
        {
            drawOnLayer(layerWater);

            for each (var cell:Cell in map.cells)
                if (cell.water > 0.1)
                    drawCell(cell, Color.blue, cell.water * 2);
        }

        private function drawRelief():void
        {
            drawOnLayer(layerRelief);

            for each (var cell:Cell in map.cells)
            {
                // Create triangles
                for each (var edge:Edge in cell.edges)
                {
                    if (!edge.v0 || !edge.v1)
                        continue;

                    g.beginFill(Color.black, calculateLighting(cell, edge.v0, edge.v1) * .8);
                    g.moveTo(cell.point.x, cell.point.y);
                    g.lineTo(edge.v0.point.x, edge.v0.point.y);
                    g.lineTo(edge.v1.point.x, edge.v1.point.y);
                    g.endFill();
                }
            }
        }

        public function calculateLighting(p:Cell, r:Corner, s:Corner):Number
        {
            if (!p || !r || !s)
                return 0;

            var lightVector:Vector3D = new Vector3D(1, 1, 0);

            var a:Vector3D = new Vector3D(p.point.x, p.point.y, p.elevation);
            var b:Vector3D = new Vector3D(r.point.x, r.point.y, r.elevation);
            var c:Vector3D = new Vector3D(s.point.x, s.point.y, s.elevation);

            var normal:Vector3D = b.subtract(a).crossProduct(c.subtract(a));
            if (normal.z < 0)
                normal.scaleBy(-1);
            normal.normalize();

            var light:Number = 0.5 + 35 * normal.dotProduct(lightVector);
            if (light < 0) light = 0;
            else
                if (light > 1) light = 1;

            return light;
        }

        private function drawColorHeightMap():void
        {
            drawOnLayer(layerHeightMap);

            for each (var cell:Cell in map.cells)
                drawCell(cell, colorFromHeightMap(cell.elevation));
        }

        private function drawDebug():void
        {
            drawOnLayer(layerDebug);

            for each (var t:TectonicPlate in map.lithosphere.tectonicPlates)
                drawDot(t.cells[0].point, Color.red, 5);

//            for each (var cell:Cell in map.cells)
//                drawDot(cell.point, Color.orange, 3);
        }

        private function drawOutlines():void
        {
            drawOnLayer(layerOutlines);

            for each (var cell:Cell in map.cells)
                for each (var edge:Edge in cell.edges)
                    if (edge.v0 && edge.v1)
                        drawLine(edge.v0.point, edge.v1.point, Color.black);
        }

        private function drawTectonicPlates():void
        {
            drawOnLayer(layerTectonicPlates);

            for each (var cell:Cell in map.cells)
            {
                if (cell.tectonicPlate && cell.tectonicPlate.type != TectonicPlate.DEEP)
                    drawCell(cell, cell.tectonicPlate.color);
                //fillCell(cell, cell.tectonicPlate.type == TectonicPlate.CONTINENTAL ? 0xE74856 : 0x8E8CD8);

                // Draw tectonic plate direction
                if (cell.tectonicPlateBorder)
                    drawPointer(cell.point, cell.tectonicPlateDirection, Color.black);
            }
        }

        private function drawOnLayer(layer:UIComponent):void
        {
            g = layer.graphics;
            g.clear();
        }

        private function drawCell(cell:Cell, color:uint, alpha:Number = 1):void
        {
            // Draw a filled cell
            g.beginFill(color, alpha);
            for each (var edge:Edge in cell.edges)
            {
                if (edge.v0 && edge.v1)
                {
                    g.moveTo(edge.v0.point.x, edge.v0.point.y);
                    g.lineTo(cell.point.x, cell.point.y);
                    g.lineTo(edge.v1.point.x, edge.v1.point.y);
                }
            }
            g.endFill();
        }

        private function drawDot(point:Point, color:uint, size:int):void
        {
            g.beginFill(color);
            g.drawCircle(point.x, point.y, size);
            g.endFill();
        }

        private function drawLine(point1:Point, point2:Point, color:uint, weight:Number = 1, moveTo:Boolean = true):void
        {
            g.lineStyle(weight, color);
            if (moveTo) g.moveTo(point1.x, point1.y);
            else g.lineTo(point1.x, point1.y);
            g.lineTo(point2.x, point2.y);
            g.lineStyle();
        }

        private function drawPointer(point:Point, direction:Number, color:uint, distance:Number = 7, pointerAlpha:Number = 1):void
        {
            // Draw pointer
            g.lineStyle(2, color, pointerAlpha);
            g.beginFill(color, pointerAlpha);
            g.drawCircle(point.x, point.y, 2);
            g.endFill();
            g.moveTo(point.x, point.y);
            var head:Point = Util.pointFromDegreesAndDistance(point, direction, distance);
            g.lineTo(head.x, head.y);
            g.lineStyle();
        }

        private function onLayerGroupContainerResize(event:ResizeEvent):void
        {
            var t:Object = event.target;
            t.height = (t.width / t.contentWidth) * t.contentHeight;
        }

        private function colorFromHeightMap(height:Number):uint
        {
            var colors:Array = [Color.darkBlue, Color.blue, Color.green, Color.yellow, Color.orange, Color.red];

            var preciseIndex:Number = (colors.length - 1) * height;
            var index:int = Math.floor(preciseIndex);

            var color:uint = colors[index];
            if (index < colors.length - 1)
                color = Util.colorBetweenColors(colors[index], colors[index + 1], preciseIndex - index);

            return color;
        }
        ]]>
    </fx:Script>

    <s:VGroup width="100%"
              height="100%"
              gap="0">

        <s:Spacer height="{userInterface.toolBar.height}" />

        <s:Group width="100%"
                 height="100%">

            <s:VGroup id="layerGroupContainer"
                      padding="15"
                      width="100%"
                      height="100%"
                      resizeMode="scale"
                      resize="onLayerGroupContainerResize(event)">
                <s:Group id="layerGroup"
                         width="1200"
                         height="600" />
            </s:VGroup>


            <!--            <s:Rect width="100%"-->
            <!--                    elevation="100%">-->
            <!--                <s:fill>-->
            <!--                    <s:SolidColor color="{Color.red}"-->
            <!--                                  alpha=".4" />-->
            <!--                </s:fill>-->
            <!--            </s:Rect>-->


            <!--            <s:HGroup id="layerGroupMask"-->
            <!--                      width="100%"-->
            <!--                      elevation="{layerGroupContainer.elevation}"-->
            <!--                      padding="15">-->
            <!--                <s:Rect width="100%"-->
            <!--                        elevation="100%">-->
            <!--                    <s:fill>-->
            <!--                        <s:SolidColor color="{Color.red}" />-->
            <!--                    </s:fill>-->
            <!--                </s:Rect>-->
            <!--            </s:HGroup>-->

        </s:Group>

    </s:VGroup>

    <ui:UserInterface id="userInterface"
                      width="100%"
                      height="100%" />

</s:Application>