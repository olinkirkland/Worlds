<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               width="100%"
               height="100%"
               frameRate="60"
               applicationComplete="onApplicationComplete(event)">

    <fx:Script>
        <![CDATA[
        import global.Color;
        import global.Util;

        import graph.Cell;
        import graph.Edge;

        import layers.TectonicPlate;

        import mx.core.UIComponent;
        import mx.events.FlexEvent;

        public static var map:Map;

        private var seed:int = 1;
        private var seaLevel:Number = .3;

        private var layerOutlines:UIComponent;
        private var layerTectonicPlates:UIComponent;
        private var layerHeightMap:UIComponent;
        private var layerOcean:UIComponent;

        public function onApplicationComplete(event:FlexEvent):void {
            NativeApplication.nativeApplication.activeWindow.maximize();
            setTimeout(createNewMap, 100);

            // Set up layers
            layerOutlines = new UIComponent();
            layerTectonicPlates = new UIComponent();
            layerHeightMap = new UIComponent();
            layerOcean = new UIComponent();

            var drawLayers:Array = [layerTectonicPlates, layerHeightMap, layerOcean, layerOutlines];
            for each (var layer:UIComponent in drawLayers)
                addElement(layer);

            // Interactivity
            stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
            addEventListener(MouseEvent.CLICK, onClick);
        }

        private function draw():void {
            drawOutlines();
            drawTectonicPlates();
            drawColorHeightMap();
        }

        private function onKeyDown(event:KeyboardEvent):void {
            switch (event.keyCode) {
                case Keyboard.N:
                    createNewMap();
                    break;
                case Keyboard.Q:
                    toggleLayer(layerOutlines);
                    break;
                case Keyboard.W:
                    toggleLayer(layerHeightMap);
                    break;
                case Keyboard.E:
                    toggleLayer(layerTectonicPlates);
                    break;
                case Keyboard.R:
                    toggleLayer(layerOcean);
                    break;
                default:
                    break;
            }
        }

        private function toggleLayer(layer:UIComponent):void {
            layer.visible = !layer.visible;
        }

        private function onClick(event:MouseEvent):void {
            layerOcean.graphics.clear();
            var p:Point = new Point(event.localX, event.localY);
            var size:int = 40;
            var range:Rectangle = new Rectangle(p.x - size / 2, p.y - size / 2, size, size);
            var cell:Cell = map.getCellByPoint(Util.closestPoint(p, map.quadTree.query(range)));
            if (!cell)
                return;

            trace(cell.height);
        }

        private function createNewMap():void {
            var d:Date = new Date();
            map = new Map(1600, 1000, seed++);
            Util.log("Total time taken: " + "  " + Util.secondsSince(d));

            draw();
        }

        private function drawHeightMap():void {
            var g:Graphics = layerHeightMap.graphics;
            g.clear();

            for each (var cell:Cell in map.cells) {
                fillCell(g, cell, Util.colorBetweenColors(Color.black, Color.white, cell.height));

                for each (var edge:Edge in cell.edges)
                    if (edge.v0 && edge.v1)
                        drawLine(g, edge.v0.point, edge.v1.point, Color.black);
            }
        }

        private function drawColorHeightMap():void {
            var g:Graphics = layerHeightMap.graphics;
            g.clear();

            for each (var cell:Cell in map.cells)
                fillCell(g, cell, colorFromHeightMap(cell.height));
        }

        private function colorFromHeightMap(height:Number):uint {
            var colors:Array = [Color.darkBlue, Color.blue, Color.green, Color.yellow, Color.orange, Color.red];

            var preciseIndex:Number = (colors.length - 1) * height;
            var index:int = Math.floor(preciseIndex);

            var color:uint = colors[index];
            if (index < colors.length - 1)
                color = Util.colorBetweenColors(colors[index], colors[index + 1], preciseIndex - index);

            return color;
        }

        private function drawOutlines():void {
            var g:Graphics = layerOutlines.graphics;
            g.clear();

            for each (var cell:Cell in map.cells)
                for each (var edge:Edge in cell.edges)
                    if (edge.v0 && edge.v1)
                        drawLine(g, edge.v0.point, edge.v1.point, Color.black);
        }

        private function drawTectonicPlates():void {
            var g:Graphics = layerTectonicPlates.graphics;
            g.clear();

            for each (var cell:Cell in map.cells) {
                if (cell.tectonicPlate)
                    fillCell(g, cell, cell.tectonicPlate.color);

                // Draw tectonic plate direction
                if (cell.tectonicPlateBorder)
                    drawPointer(g, cell.point, cell.tectonicPlateDirection, Color.black);
            }
        }

        private function fillCell(g:Graphics, cell:Cell, color:uint):void {
            // Draw a filled cell
            g.beginFill(color);
            for each (var edge:Edge in cell.edges) {
                if (edge.v0 && edge.v1) {
                    g.moveTo(edge.v0.point.x, edge.v0.point.y);
                    g.lineTo(cell.point.x, cell.point.y);
                    g.lineTo(edge.v1.point.x, edge.v1.point.y);
                }
            }
            g.endFill();
        }

        private function drawDot(g:Graphics, point:Point, color:uint, size:int):void {
            g.beginFill(color);
            g.drawCircle(point.x, point.y, size);
            g.endFill();
        }

        private function drawLine(g:Graphics, point1:Point, point2:Point, color:uint, weight:Number = 1):void {
            g.lineStyle(weight, color);
            g.moveTo(point1.x, point1.y);
            g.lineTo(point2.x, point2.y);
            g.lineStyle();
        }

        private function drawPointer(g:Graphics, point:Point, direction:Number, color:uint):void {
            // Draw pointer
            var head:Point = Util.pointFromAngleAndDistance(point, Util.degreesToRadians(direction), 6);
            g.lineStyle(2, color);
            g.beginFill(Color.white);
            g.drawCircle(point.x, point.y, 4);
            g.endFill();
            g.moveTo(point.x, point.y);
            g.lineTo(head.x, head.y);
            g.lineStyle();
        }
        ]]>
    </fx:Script>
</s:Application>