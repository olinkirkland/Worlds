<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:ui="ui.*"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         width="100%"
         height="100%"
         creationComplete="onCreationComplete(event)">

    <fx:Script>
            <![CDATA[
        import global.Color;
        import global.Icons;
        import global.Util;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        import spark.events.ElementExistenceEvent;
        import spark.events.TextOperationEvent;

        public var seedPhrase:String = Util.randomSeedPhrase();

        private function onCreationComplete(event:FlexEvent):void
        {
            updateSeed(seedPhrase);
        }

        public function addLayers(layers:Array):void
        {
            layersList.dataProvider = new ArrayCollection(layers);
        }

        public function updateSeed(value:String):void
        {
            seedPhrase = value;
            seedLabel.text = seedPhrase;
            seedNumberLabel.text = "(" + Util.stringToSeed(seedPhrase) + ")";
        }

        public function updateLayer(item:*):void
        {
            layersList.dataProvider.itemUpdated(item);
        }

        public function setToWorking():void
        {
            newMapButton.label = "Working...";
            newMapButton.setStyle("icon", null);

            mapPropertiesGroup.enabled = false;
            layersList.enabled = false;
        }

        public function setToReady():void
        {
            newMapButton.label = "";
            newMapButton.setStyle("icon", Icons.play);

            mapPropertiesGroup.enabled = true;
            layersList.enabled = true;
        }

        private function onRandomSeedPhraseButtonClicked(event:MouseEvent):void
        {
            seedTextInput.text = Util.randomSeedPhrase();
            onSeedTextInputChange(null);
        }

        private function onNewMapButtonClicked(event:MouseEvent):void
        {
            updateSeed(seedTextInput.text);
            dispatchEvent(new Event(UIEventType.MAKE_MAP));
        }

        private function onPerformanceReportButtonClicked(event:MouseEvent):void
        {
            openPopup(new PerformanceReportPopup());
        }

        private function onOptionsButtonClicked(event:MouseEvent):void
        {
            openPopup(new AdvancedPropertiesPopup());
        }

        private function openPopup(panel:Popup):void
        {
            // Close existing popups
            while (popups.numElements > 0)
                Popup(popups.getElementAt(0)).close();

            popups.addElement(panel);
        }

        private function onPopupAddedOrRemoved(event:ElementExistenceEvent):void
        {
            callLater(function ():void
            {
                popupModalRectangle.includeInLayout = popupModalRectangle.visible = popups.numElements > 0;
            });
        }

        private function onSeedTextInputChange(event:TextOperationEvent):void
        {
            newMapButton.enabled = seedTextInput.text.length > 0;
        }
        ]]>
    </fx:Script>
    <s:Group id="toolBar"
             width="100%">

        <s:Panel top="15"
                 left="15"
                 right="15">

            <s:VGroup width="100%"
                      height="100%"
                      gap="6">

                <s:HGroup width="100%"
                          verticalAlign="middle">

                    <s:VGroup gap="0">
                        <s:Label id="seedLabel"
                                 styleName="header" />
                        <s:Label id="seedNumberLabel" />
                    </s:VGroup>

                    <ui:VerticalDivider />

                    <s:Button id="newMapButton"
                              enabled="false"
                              skinClass="skins.buttons.PrimaryButtonSkin"
                              icon="{Icons.play}"
                              click="onNewMapButtonClicked(event)" />

                    <s:HGroup id="mapPropertiesGroup"
                              width="100%"
                              height="100%"
                              verticalAlign="middle">

                        <s:Button id="randomSeedPhraseButton"
                                  icon="{Icons.dice}"
                                  click="onRandomSeedPhraseButtonClicked(event)" />

                        <s:TextInput id="seedTextInput"
                                     width="200"
                                     change="onSeedTextInputChange(event)" />
                        <ui:VerticalDivider />

                        <s:Button id="buttonPerformanceReport"
                                  label="Performance Report"
                                  icon="{Icons.graph}"
                                  click="onPerformanceReportButtonClicked(event)" />

                        <s:Button id="buttonAdvancedProperties"
                                  label="Advanced Properties"
                                  icon="{Icons.options}"
                                  click="onOptionsButtonClicked(event)" />
                    </s:HGroup>
                </s:HGroup>

                <s:List id="layersList"
                        width="100%"
                        direction="ltr"
                        itemRenderer="ui.renderers.LayersListItemRenderer"
                        horizontalScrollPolicy="auto"
                        verticalScrollPolicy="off"
                        borderVisible="false"
                        contentBackgroundAlpha="0">
                    <s:layout>
                        <s:HorizontalLayout />
                    </s:layout>
                </s:List>

            </s:VGroup>

        </s:Panel>

    </s:Group>

    <!--Modal mode rectangle for popups-->
    <s:VGroup id="popupModalRectangle"
              width="100%"
              height="100%"
              visible="false"
              includeInLayout="false">
        <s:Rect width="100%"
                height="100%">
            <s:fill>
                <s:SolidColor color="{Color.black}"
                              alpha=".4" />
            </s:fill>
        </s:Rect>
    </s:VGroup>

    <!--Popup layer-->
    <s:VGroup id="popups"
              elementAdd="onPopupAddedOrRemoved(event)"
              elementRemove="onPopupAddedOrRemoved(event)"
              width="100%"
              height="100%"
              padding="50"
              horizontalAlign="center"
              verticalAlign="middle" />

</s:Group>
